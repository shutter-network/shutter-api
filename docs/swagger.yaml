definitions:
  GetDataForEncryption:
    properties:
      eon:
        example: 1
        type: integer
      eon_key:
        example: 0x57af5437a84ef50e5ed75772c18ae38b168bb07c50cadb65fc6136604e662255
        type: string
      epoch_id:
        example: 0x88f2495d1240f9c5523db589996a50a4984ee7a08a8a8f4b269e4345b383310abd2dc1cd9c9c2b8718ed3f486d5242f5
        type: string
      identity:
        example: 0x8c232eae4f957259e9d6b68301d529e9851b8642874c8f59d2bd0fb84a570c75
        type: string
      identity_prefix:
        example: 0x79bc8f6b4fcb02c651d6a702b7ad965c7fca19e94a9646d21ae90c8b54c030a0
        type: string
    type: object
  GetDecryptionKey:
    properties:
      decryption_key:
        example: 0x99a805fc26812c13041126b25e91eccf3de464d1df7a95d1edca8831a9ec02dd
        type: string
      decryption_timestamp:
        example: 1735044061
        type: integer
      identity:
        example: 0x8c232eae4f957259e9d6b68301d529e9851b8642874c8f59d2bd0fb84a570c75
        type: string
    type: object
  RegisterIdentityRequest:
    properties:
      decryptionTimestamp:
        example: 1735044061
        type: integer
      identityPrefix:
        example: 0x79bc8f6b4fcb02c651d6a702b7ad965c7fca19e94a9646d21ae90c8b54c030a0
        type: string
    type: object
  RegisterIdentityResponse:
    properties:
      eon:
        example: 1
        type: integer
      eon_key:
        example: 0x57af5437a84ef50e5ed75772c18ae38b168bb07c50cadb65fc6136604e662255
        type: string
      identity:
        example: 0x8c232eae4f957259e9d6b68301d529e9851b8642874c8f59d2bd0fb84a570c75
        type: string
      identity_prefix:
        example: 0x79bc8f6b4fcb02c651d6a702b7ad965c7fca19e94a9646d21ae90c8b54c030a0
        type: string
      tx_hash:
        example: 0x3026ad202ca611551377eef069fb6ed894eae65329ce73c56f300129694f12ba
        type: string
    type: object
  error.Http:
    properties:
      description:
        type: string
      metadata:
        type: string
      statusCode:
        type: integer
    type: object
info:
  contact: {}
  description: Shutter API is an encryption and decryption service that allows clients
    to register decryption triggers for specific encrypted messages. These triggers
    are invoked at a future time, eventually releasing the keys needed to decrypt
    the messages. Clients can specify the exact timestamp at which the trigger should
    release the decryption keys.
  title: Shutter API
paths:
  /decrypt_commitment:
    get:
      description: Provides a way for clients to easily decrypt their encrypted message
        for which they have registered the identity for. Timestamp with which the
        identity was registered should have been passed for the message to be decrypted
        successfully.
      parameters:
      - description: Identity used for registeration and encrypting the message.
        in: query
        name: identity
        required: true
        type: string
      - description: Encrypted commitment is the clients encrypted message.
        in: query
        name: encryptedCommitment
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success.
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Invalid Decrypt commitment request.
          schema:
            $ref: '#/definitions/error.Http'
        "500":
          description: Internal server error.
          schema:
            $ref: '#/definitions/error.Http'
      summary: Allows clients to decrypt their encrypted message.
      tags:
      - Crypto
  /get_data_for_encryption:
    get:
      description: Retrieves all the necessary data required by clients for encrypting
        any message.
      parameters:
      - description: Ethereum address associated with the identity. If you are registering
          the identity yourself, pass the address of the account making the registration.
          If you want the API to register the identity, pass the address TBD.
        in: query
        name: address
        required: true
        type: string
      - description: Optional identity prefix. You can generate it on your end and
          pass it to this endpoint, or allow the API to randomly generate one for
          you.
        in: query
        name: identityPrefix
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success.
          schema:
            $ref: '#/definitions/GetDataForEncryption'
        "400":
          description: Invalid Get data for encryption request.
          schema:
            $ref: '#/definitions/error.Http'
        "500":
          description: Internal server error.
          schema:
            $ref: '#/definitions/error.Http'
      summary: Provides data necessary to allow encryption.
      tags:
      - Crypto
  /get_decryption_key:
    get:
      description: Retrieves a decryption key for a given registered identity once
        the timestamp is reached. Decryption key is 0x padded, clients need to remove
        the prefix when decrypting on thier end.
      parameters:
      - description: Identity associated with the decryption key.
        in: query
        name: identity
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success.
          schema:
            $ref: '#/definitions/GetDecryptionKey'
        "400":
          description: Invalid Get decryption key request.
          schema:
            $ref: '#/definitions/error.Http'
        "404":
          description: Decryption key not found for the associated identity.
          schema:
            $ref: '#/definitions/error.Http'
        "500":
          description: Internal server error.
          schema:
            $ref: '#/definitions/error.Http'
      summary: Get decryption key.
      tags:
      - Crypto
  /register_identity:
    post:
      description: Allows clients to register an identity used for encryption and
        specify a release timestamp for the decryption key associated with the encrypted
        message.
      parameters:
      - description: Timestamp and Identity which client want to make the registration
          with.
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/RegisterIdentityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success.
          schema:
            $ref: '#/definitions/RegisterIdentityResponse'
        "400":
          description: Invalid Register identity request.
          schema:
            $ref: '#/definitions/error.Http'
        "500":
          description: Internal server error.
          schema:
            $ref: '#/definitions/error.Http'
      summary: Allows clients to register any identity.
      tags:
      - Crypto
swagger: "2.0"
